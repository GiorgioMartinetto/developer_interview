[project]
name = "my-projects"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "alembic>=1.17.0",
    "dotenv>=0.9.9",
    "fastapi>=0.68.0",
    "gunicorn>=23.0.0",
    "loguru>=0.5.3",
    "psycopg2-binary>=2.9.11",
    "pydantic>=1.8.0",
    "pyyaml>=6.0.3",
    "ruff[format]>=0.14.1",
    "sqlalchemy>=2.0.44",
    "uvicorn>=0.15.0",
]


[tool.ruff]
# Directory principali da analizzare
src = ["src", "tests"]

# Selezione regole principali:
# E,F = errori e bug di Pyflakes/pycodestyle
# I = ordine degli import (ex isort)
# B = bugbear (best practices)
# UP = pyupgrade (modernizza il codice)
# PTH = pathlib (uso coerente dei path)
# SIM = semplifica codice
# TID = tipizzazione
# PERF = performance
# NPY = numpy-related (utile se usi scientific stack)
# S = security (bandit-like)
lint.select = [
  "E", "F", "I", "B", "UP", "PTH", "SIM", "TID", "PERF", "S"
]

# Regole da ignorare (opzionale)
lint.ignore = [
  "E501",  # ignora line-too-long (formatter lo gestisce)
  "B008",  # argomenti mutabili nei default (FastAPI li usa per deps)
]

# Lunghezza massima di riga (come Black)
line-length = 88

# Target Python version
target-version = "py310"

# Esclusioni
exclude = [
  "venv",
  ".venv",
  "migrations",
  "__pycache__",
  "node_modules"
]

# Ordine import simile a isort
[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true

# Formattazione automatica (sostituisce Black)
[tool.ruff.format]
quote-style = "double"          # Usa doppi apici per stringhe
indent-style = "space"          # Indentazione a spazi
line-ending = "lf"              # Unix-style
skip-magic-trailing-comma = false
docstring-code-format = true    # Format docstring code blocks

# Opzionale: regole di sicurezza base (simili a bandit)
[tool.ruff.lint.per-file-ignores]
# Ignora warning di sicurezza nei test
"tests/*" = ["S101"]
